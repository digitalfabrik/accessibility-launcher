### AUTO GENERATED. DO NOT MODIFY. ###
# This file should be auto generated by the files in the src folder.
# You can update it by running `build-config-file.sh` script.
commands:
    check_config:
        description: This command builds the circle config from the files in src and validates that it is up-to-date and valid.
        steps:
            - run:
                command: curl -fLSs https://raw.githubusercontent.com/CircleCI-Public/circleci-cli/master/install.sh | sudo bash
                name: Install CircleCI CLI
            - run:
                command: .circleci/build-config-file.sh
                name: Build circle config
            - run:
                command: |
                    FILES_MODIFIED=""
                    setcommit () {
                      FILES_MODIFIED=$(git status -s | grep -i -E '.*circleci/config.yml')
                    }
                    setcommit || true
                    if [ -z "$FILES_MODIFIED" ]
                    then
                      echo "The CircleCI config is up to date."
                      exit 0;
                    else
                      echo "The CircleCI config is not up to date. You can update it by running `yarn run circleci:update-config`."
                      exit 1;
                    fi
                name: CircleCI config up to date
            - run:
                command: circleci config validate
                name: Validate circle config
    notify:
        description: Send a notification (to Mattermost) at the end of a job, based on success or failure. Must be the last step in a job.
        parameters:
            channel:
                default: launcher-accessibility
                type: string
            failure_mentions:
                default: '@peter.huber @stefanie.metzger'
                type: string
            only_for_branch:
                default: main
                type: string
            success_mentions:
                default: ""
                type: string
            success_message:
                default: ""
                type: string
        steps:
            - run:
                command: |
                    if [ -n "<< parameters.failure_mentions >>" ]; then
                        echo 'export MM_MESSAGE=":fire: The [${CIRCLE_JOB}](${CIRCLE_BUILD_URL}) job has failed on the main branch! :fire:\n<< parameters.failure_mentions >>"' >> $BASH_ENV
                    else
                        echo 'export MM_MESSAGE=":fire: The [${CIRCLE_JOB}](${CIRCLE_BUILD_URL}) job has failed on the main branch! :fire:"' >> $BASH_ENV
                    fi
                name: Mattermost - Prepare failure message
                when: on_fail
            - run:
                command: |
                    if [ -n "<< parameters.success_message >>" ]; then
                        if [ -n "<< parameters.success_mentions >>" ]; then
                            echo 'export MM_MESSAGE="<< parameters.success_message >>\n<< parameters.success_mentions >>"' >> $BASH_ENV
                        else
                            echo 'export MM_MESSAGE="<< parameters.success_message >>"' >> $BASH_ENV
                        fi
                    fi
                name: Mattermost - Prepare success message
                when: on_success
            - run:
                command: |
                    #!/bin/bash

                    Send_notification() {
                        if [ "<< parameters.only_for_branch >>" != "${CIRCLE_BRANCH}" ]; then
                            echo "Not on << parameters.only_for_branch >> branch. Skipping."
                            exit 0
                        fi

                        if [ -z "${MM_MESSAGE}" ]; then
                            echo "No message set. Skipping."
                            exit 0
                        fi

                        if [ -z "${MM_WEBHOOK_LAUNCHER}" ]; then
                            echo "NO MATTERMOST WEBHOOK SET"
                            echo "Please add the environment variable \"MM_WEBHOOK_LAUNCHER\" in the settings for this project."
                            exit 1
                        fi

                        STATUS=$(curl -o /dev/null -s -w "%{http_code}\n" -X POST -H 'Content-type: application/json' \
                            --data \
                            "{
                              \"channel\": \"<< parameters.channel >>\",
                              \"username\": \"circleci\",
                              \"text\": \"${MM_MESSAGE}\"
                            }" "${MM_WEBHOOK_LAUNCHER}")

                        if [ "$STATUS" -ne "200" ]; then
                            echo "Notification not sent due to an error. Status: $STATUS. Please check the webhook URL"
                            exit 1
                        fi

                        echo "Notification sent!"
                        exit 0
                      }

                      Send_notification
                name: Mattermost Status Alert
                when: always
    persist_environment_variables:
        description: Writes the environment variables to the file 'environment_variables'. Make sure the file is persisted and has been attached.
        steps:
            - run:
                command: cat ${BASH_ENV}
                name: List environment variables
            - run:
                command: cat ${BASH_ENV} >> environment_variables
                name: Save environment variables to file
            - persist_to_workspace:
                paths:
                    - environment_variables
                root: ./
    prepare_workspace:
        description: Attach the workspace at ~/attached_workspace and list its contents
        steps:
            - attach_workspace:
                at: ~/attached_workspace
            - run:
                command: ls ~/attached_workspace
                name: Attached workspace contents
            - run:
                command: ls -R ~/attached_workspace
                name: Recursively list attached workspace contents
    restore_environment_variables:
        description: Sets the environment variables specified in the file 'environment_variables'. Make sure the file is persisted and has been attached.
        steps:
            - run:
                command: cat ~/attached_workspace/environment_variables
                name: List environment variables
            - run:
                command: cat ~/attached_workspace/environment_variables >> ${BASH_ENV}
                name: Restore environment variables
    restore_ruby_cache:
        description: Restores and saves fastlane cache of the passed directory.
        steps:
            - restore_cache:
                keys:
                    - 3-gems-{{ arch }}-{{ checksum "Gemfile.lock" }}
                    - 3-gems-{{ arch }}-
            - run:
                command: bundle check || bundle install
                name: Install Fastlane
            - save_cache:
                key: 3-gems-{{ arch }}-{{ checksum "Gemfile.lock" }}
                paths:
                    - /vendor/bundle
jobs:
    build_android:
        docker:
            - image: cimg/android:2024.08.1-node
        environment:
            BUNDLE_PATH: vendor/bundle
            FASTLANE_SKIP_UPDATE_CHECK: true
            TOTAL_CPUS: 3
        resource_class: medium+
        shell: /bin/bash -eo pipefail
        steps:
            - add_ssh_keys:
                fingerprints:
                    - 24:1d:3b:b7:b3:49:69:d7:54:c3:93:a5:a2:d1:71:db
            - checkout
            - restore_ruby_cache
            - prepare_workspace
            - run:
                command: bundle exec fastlane keystore
                name: '[FL] Prepare Android Keystore'
            - run:
                command: bundle exec fastlane build
                name: '[FL] Build Android'
            - run:
                command: mkdir -p attached_workspace && mv app/build/outputs/bundle/release/app-release.aab attached_workspace/app-release.aab
                name: Move aab
            - persist_to_workspace:
                paths:
                    - app-release.aab
                root: attached_workspace
            - store_artifacts:
                path: attached_workspace/app-release.aab
            - notify
    deliver_android:
        docker:
            - image: cimg/android:2024.08.1-node
        environment:
            BUNDLE_PATH: vendor/bundle
            FASTLANE_SKIP_UPDATE_CHECK: true
        parameters:
            production_delivery:
                description: Whether to deliver the build to production.
                type: boolean
        shell: /bin/bash -eo pipefail
        steps:
            - checkout
            - prepare_workspace
            - restore_ruby_cache
            - run:
                command: bundle exec fastlane validate_play_store_key
                name: Validate Play Store Key
            - run:
                command: bundle exec fastlane upload_to_playstore production_delivery:"<< parameters.production_delivery >>"
                name: PlayStore Upload
            - notify
    notify_android:
        docker:
            - image: cimg/node:22.7.0
        parameters:
            production_delivery:
                description: Whether builds are delivered to the production store.
                type: boolean
        resource_class: small
        steps:
            - checkout
            - prepare_workspace
            - run:
                command: echo "export ANDROID_ARTIFACT_URLS='$(echo $(cat $(ls | grep apk-url)))'" >> ${BASH_ENV}
                name: Prepare artifact urls
                working_directory: ~/attached_workspace
            - notify:
                channel: releases
                success_message: <<^ parameters.production_delivery >>[Development] <</ parameters.production_delivery >>Launcher has been released successfully on Android!\n${ANDROID_ARTIFACT_URLS}
    promote_android:
        docker:
            - image: cimg/android:2024.08.1-node
        environment:
            BUNDLE_PATH: vendor/bundle
            FASTLANE_SKIP_UPDATE_CHECK: true
        resource_class: small
        shell: /bin/bash -eo pipefail
        steps:
            - checkout
            - restore_ruby_cache
            - run:
                command: bundle exec fastlane android playstore_promote
                name: '[FL] Play Store Promotion'
            - notify
parameters:
    run_dev_delivery:
        default: false
        type: boolean
    run_prod_delivery:
        default: false
        type: boolean
    run_promote:
        default: false
        type: boolean
version: 2.1
workflows:
    dev_delivery:
        jobs:
            - build_android:
                context:
                    - mattermost
                    - credentials-repo
                    - credentials-launcher
                    - tuerantuer-google-play
            - deliver_android:
                context:
                    - mattermost
                    - tuerantuer-google-play
                production_delivery: false
                requires:
                    - build_android
            - notify_android:
                context:
                    - mattermost
                production_delivery: false
                requires:
                    - deliver_android
        when: << pipeline.parameters.run_dev_delivery >>
    prod_delivery:
        jobs:
            - build_android:
                context:
                    - mattermost
                    - credentials-repo
                    - credentials-launcher
                    - tuerantuer-google-play
            - deliver_android:
                context:
                    - mattermost
                    - tuerantuer-google-play
                production_delivery: true
                requires:
                    - build_android
            - notify_android:
                context:
                    - mattermost
                production_delivery: true
                requires:
                    - deliver_android
        when: << pipeline.parameters.run_prod_delivery >>
    promote:
        jobs:
            - promote_android:
                context:
                    - mattermost
                    - tuerantuer-google-play
        when: << pipeline.parameters.run_promote >>

